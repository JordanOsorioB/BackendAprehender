generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                String                   @id @default(cuid())
  nombre            String
  nick              String?
  level             Int
  experience        Int
  coins             Int      @default(0)
  profileType       ProfileType              @default(STUDENT)
  courseEnrollments CourseEnrollment[]
  exerciseStates    ExerciseState[]
  subjectProgress   StudentSubjectProgress[]
  unitProgress      StudentUnitProgress[]
  user              User?
  profilePicture    String?
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model School {
  id       String    @id @default(cuid())
  name     String
  courses  Course[]
  teachers Teacher[]
  users    User[]    @relation("UserToSchool")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  schoolId  String?
  role      UserRole @default(STUDENT)
  studentId String?  @unique
  teacherId String?  @unique
  username  String   @unique @default("nickname")
  school    School?  @relation("UserToSchool", fields: [schoolId], references: [id])
  student   Student? @relation(fields: [studentId], references: [id])
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
}

model Teacher {
  id          String      @id @default(cuid())
  name        String
  subjectId   String
  schoolId    String
  profileType ProfileType @default(TEACHER)
  courses     Course[]
  school      School      @relation(fields: [schoolId], references: [id])
  subject     Subject     @relation(fields: [subjectId], references: [id])
  user        User?
}

model Subject {
  id              String                   @id @default(cuid())
  name            String
  studentProgress StudentSubjectProgress[]
  units           SubjectUnit[]
  teachers        Teacher[]
  studyMaterials  StudyMaterial[]
}

model Course {
  id          String             @id @default(cuid())
  name        String
  schoolId    String
  teacherId   String
  school      School             @relation(fields: [schoolId], references: [id])
  teacher     Teacher            @relation(fields: [teacherId], references: [id])
  enrollments CourseEnrollment[]
  progress    Progress[]
}

model Progress {
  id       String @id @default(cuid())
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model SubjectUnit {
  id           Int                   @id @default(autoincrement())
  title        String
  description  String
  order        Int
  subjectId    String
  unitId       Int
  exercises    Exercise[]
  unitProgress StudentUnitProgress[] @relation("ProgressToSubjectUnit")
  subject      Subject               @relation(fields: [subjectId], references: [id])
  unit         Unit                  @relation("UnitSubjectUnits", fields: [unitId], references: [id])
}

model Exercise {
  id               String            @id @default(cuid())
  title            String
  description      String
  type             ExerciseType
  difficulty       String
  totalExperience  Int
  subjectUnitId    Int
  content          Json
  subjectUnit      SubjectUnit       @relation(fields: [subjectUnitId], references: [id])
  states           ExerciseState[]
}

enum ExerciseCompletionStatus {
  NOT_ANSWERED
  CORRECT
  INCORRECT
}

model ExerciseState {
  id               String   @id @default(cuid())
  studentId        String
  exerciseId       String
  completionStatus ExerciseCompletionStatus @default(NOT_ANSWERED)
  attempts         Int
  lastAttempt      DateTime
  correctAnswers   Int
  experienceEarned Int
  locked           Boolean
  respuesta        String?
  exercise         Exercise @relation(fields: [exerciseId], references: [id])
  student          Student  @relation(fields: [studentId], references: [id])
}

model StudentSubjectProgress {
  id        String  @id @default(cuid())
  studentId String
  subjectId String
  progress  Int
  student   Student @relation(fields: [studentId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
}

model StudentUnitProgress {
  id          String      @id @default(cuid())
  studentId   String
  unitId      Int
  unitFkId    Int
  progress    Int
  student     Student     @relation(fields: [studentId], references: [id])
  unit        Unit        @relation("ProgressToUnit", fields: [unitFkId], references: [id])
  subjectUnit SubjectUnit @relation("ProgressToSubjectUnit", fields: [unitId], references: [id])
}

model Unit {
  id                 Int                   @id @default(autoincrement())
  title              String
  description        String
  order              Int
  unitProgress       StudentUnitProgress[] @relation("ProgressToUnit")
  subjectUnits       SubjectUnit[]         @relation("UnitSubjectUnits")
}

model PairingPair {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  pairingContents PairingContent[]
}

model Level {
  id           Int      @id @default(autoincrement())
  level        Int      @unique
  minXP        Int
  maxXP        Int
  unlockType   UnlockType?
  rewardAmount Int?
  description  String?
}

model PairingContent {
  id            Int         @id @default(autoincrement())
  content       String
  pairingPairId Int
  pairingPair   PairingPair @relation(fields: [pairingPairId], references: [id])
}

enum ExerciseType {
  alternativas
  desarrollo
  terminos_pareados
}

enum UserRole {
  UTP
  TEACHER
  STUDENT
  ADMIN
  SUPERADMIN
}
enum ProfileType {
  UTP
  TEACHER
  STUDENT
}

enum StudyMaterialType {
  PDF
  VIDEO
  LINK
  IMAGE
  OTHER
}

model StudyMaterial {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        StudyMaterialType
  url         String   // Enlace al archivo o video
  createdAt   DateTime @default(now())
  subjectId   String?
  subject     Subject? @relation(fields: [subjectId], references: [id])
}

enum UnlockType {
  NONE
  PROFILE_PICTURE
  COIN
  CHANGE_NICK
}

model ProfilePictureGallery {
  id        String   @id @default(cuid())
  url       String
  name      String?
  createdAt DateTime @default(now())
}
